    Description: >
        This is to Deploy a High-Availability Web App using CloudFormation From Prakash Rajpurohit
#########################################################
    Parameters:
        EnvName:
            Description: Environment Name
            Type: String
#########################################################
    Resources:

      UdacityS3ReadOnlyEC2:
        Type: 'AWS::IAM::Role'
        Properties:
          Description: Assing Role to Access EC2
          AssumeRolePolicyDocument:
            Statement:
            - Effect: Allow
              Principal:
                Service:
                - ec2.amazonaws.com
              Action:
              - 'sts:AssumeRole'
          ManagedPolicyArns: 
          - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
          - arn:aws:iam::aws:policy/AmazonEC2FullAccess

      InstanceProfileRolesForApp:
        Type: AWS::IAM::InstanceProfile
        Properties: 
          Roles:
          - !Ref UdacityS3ReadOnlyEC2
          
      SecurityGroupWebServer:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to My hosts
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0

################### Launch Configuration ###############
      LaunchConfigurationWebApplication:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
          UserData:
            Fn::Base64: !Sub |
              apt-get update -y
              apt-get install unzip -y
              apt-get install awscli -y
              apt-get install apache2 -y
              systemctl start apache2.service
              cd /var/www/html
              aws s3 cp s3://rajpurp303828929336/index.zip .
              unzip -o index.zip
          IamInstanceProfile:
            Ref: InstanceProfileRolesForApp
          ImageId: ami-090717c950a5c34d3
          SecurityGroups:
          - Ref: SecurityGroupWebServer
          InstanceType: t2.medium
          BlockDeviceMappings:
          - DeviceName: "/dev/sda1"
            Ebs:
              VolumeSize: '10'


          
      TargetGroupWebApplication:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          VpcId: 
            Fn::ImportValue:
              Fn::Sub: "${EnvName}-VPCID"
              
      AutoScalingGroupWebApplication:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
          VPCZoneIdentifier:
          - Fn::ImportValue: 
              !Sub "${EnvName}-PRIV-NETS"
          LaunchConfigurationName:
            Ref: LaunchConfigurationWebApplication
          MinSize: '4'
          MaxSize: '4'
          TargetGroupARNs:
          - Ref: TargetGroupWebApplication
          
      SecurityGroupLoadBalancer:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to My load balancer
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          
          
      LoadBalancerWebApplication:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          Subnets:
          - Fn::ImportValue: !Sub "${EnvName}-PUB1-SN"
          - Fn::ImportValue: !Sub "${EnvName}-PUB2-SN"
          SecurityGroups:
          - Ref: SecurityGroupLoadBalancer
          
      Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: TargetGroupWebApplication
          LoadBalancerArn:
            Ref: LoadBalancerWebApplication
          Port: '80'
          Protocol: HTTP
      ListenerRuleElBa:
          Type: AWS::ElasticLoadBalancingV2::ListenerRule
          Properties:
            Actions:
            - Type: forward
              TargetGroupArn: !Ref 'TargetGroupWebApplication'
            Conditions:
            - Field: path-pattern
              Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1

    Outputs: 

        LBURL: 
            Description: My Load Balancer URL
            Value: !Join [ "", [ "http://", !GetAtt LoadBalancerWebApplication.DNSName ]]
            Export:
              Name: !Sub ${EnvName}-LBURL
                  
        AutoScalingGroupWebApplication:
            Description: 'Auto Scaling Group Reference ID'
            Value: !Ref 'AutoScalingGroupWebApplication'